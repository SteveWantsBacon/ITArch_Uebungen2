
Aufgabe6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ae  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c9  00000000  00000000  00000c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000451  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000420  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000164  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  88:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <configureIO>:
	Alle Bits des DataDirectionRegister von Port B
	(DDRB) werden auf LOW gesetzt, sind somit als
	Eingang konfiguriert.
	In Binärschreibweise ist DDRB jetzt: 00000000 
	*/
	DDRB = 0x00;
  90:	14 b8       	out	0x04, r1	; 4
	/*	
	Das Bit an 1. Stelle (B0) wird auf Eins
	gesetzt -> Ausgang
	In Binärschreibweise ist DDRB jetzt: 00000001
	*/
	DDRB |= (1 << DDB0);
  92:	20 9a       	sbi	0x04, 0	; 4
	Alle Bits des DataDirectionRegister von Port D
	(DDRD) werden auf LOW gesetzt, sind somit als
	Eingang konfiguriert.
	In Binärschreibweise ist DDRD jetzt: 00000000 
	*/
	DDRD = 0x00;
  94:	1a b8       	out	0x0a, r1	; 10
	/*	
	Das Bit an 8. Stelle (D7) wird auf Eins
	gesetzt -> Ausgang
	In Binärschreibweise ist DDRD jetzt: 10000000
	*/
	DDRD |= (1 << DDD7);
  96:	57 9a       	sbi	0x0a, 7	; 10
	Das Bit an 8. Stelle (D7) von PortD wird jetzt
	auf HIGH gesetzt. Die anderen Bits von Port D
	bleiben unverändert.
	In Binärschreibweise ist PortD jetzt: 1xxxxxxx
	*/
	PORTD &= ~(1 << PORTD7);
  98:	5f 98       	cbi	0x0b, 7	; 11
	Das Bit an der 3. Stelle von Port D (DDD2) wird
	auf LOW gesetzt. Wenn diese Bit als Eingang definiert
	ist, wird dadurch der Pull-Up Widerstand deaktiviert. 
	In Binärschreibweise ist PortD jetzt: xxxxx0xx
	*/
	PORTD &= ~(1 << DDD2);
  9a:	5a 98       	cbi	0x0b, 2	; 11
	Das Bit an der 4. Stelle von Port D (DDD3) wird
	auf LOW gesetzt. Wenn diese Bit als Eingang definiert
	ist, wird dadurch der Pull-Up Widerstand deaktiviert.
	In Binärschreibweise ist PortD jetzt: xxxx0xxx
	*/
	PORTD &= ~(1 << DDD3);
  9c:	5b 98       	cbi	0x0b, 3	; 11
	Das Bit an der 6. Stelle von Port D (DDD5) wird
	auf LOW gesetzt. Wenn diese Bit als Eingang definiert
	ist, wird dadurch der Pull-Up Widerstand deaktiviert.
	In Binärschreibweise ist PortD jetzt: xx0xxxxx
	*/
	PORTD &= ~(1 << DDD5);
  9e:	5d 98       	cbi	0x0b, 5	; 11
  a0:	08 95       	ret

000000a2 <configureTimer>:
	/*
	Timer Counter Control Register 0 A (TCCR0A)
	Register auf 0 setzen (default)
	Weiter Informationen siehe ATmega328P Handbuch
	*/
	TCCR0A = 0x00;
  a2:	14 bc       	out	0x24, r1	; 36
	/*
	Timer Counter Control Register 0 B (TCCR0B)
	Register auf 0 setzen (default)
	Die drei Bits CS00, CS01 und CS02 konfigurieren den Prescaler
	*/
	TCCR0B = 0x00;
  a4:	15 bc       	out	0x25, r1	; 37
	TCCR0B &= ~(1 << CS02);
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << CS00);
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	85 bd       	out	0x25, r24	; 37

	/*
	TC0 Interrupt Mask Register (TIMSK0)
	Das Bit TOIE aktiviert den Overflow Interrupt
	*/
	TIMSK0 = 0x00;
  b8:	ee e6       	ldi	r30, 0x6E	; 110
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
	TIMSK0 |= (1 << TOIE0);
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <__vector_16>:
}

ISR(TIMER0_OVF_vect) {
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
	
}
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <runInkrementSensorCheck>:

void runInkrementSensorCheck() {
	if( PIND & (1 << 5) ) {
  da:	4d 9b       	sbis	0x09, 5	; 9
  dc:	32 c0       	rjmp	.+100    	; 0x142 <runInkrementSensorCheck+0x68>
		if(sensorSchwarz == 0) {
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e2:	81 11       	cpse	r24, r1
  e4:	2a c0       	rjmp	.+84     	; 0x13a <runInkrementSensorCheck+0x60>
			// Flanke erkannt
			if(PORTD & (1 << PORTD7)) {
  e6:	5f 9b       	sbis	0x0b, 7	; 11
  e8:	13 c0       	rjmp	.+38     	; 0x110 <runInkrementSensorCheck+0x36>
				// Bei Vorwärtsfahrt hochzählen
				nInkremente++;
  ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <nInkremente>
  ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <nInkremente+0x1>
  f2:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <nInkremente+0x2>
  f6:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <nInkremente+0x3>
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	a1 1d       	adc	r26, r1
  fe:	b1 1d       	adc	r27, r1
 100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <nInkremente>
 104:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <nInkremente+0x1>
 108:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <nInkremente+0x2>
 10c:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <nInkremente+0x3>
			}
			if(PORTB & (1 << PORTB0)) {
 110:	28 9b       	sbis	0x05, 0	; 5
 112:	13 c0       	rjmp	.+38     	; 0x13a <runInkrementSensorCheck+0x60>
				// Bei Rückwärtsfahrt runterzählen
				nInkremente--;												// ++?
 114:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <nInkremente>
 118:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <nInkremente+0x1>
 11c:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <nInkremente+0x2>
 120:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <nInkremente+0x3>
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	a1 09       	sbc	r26, r1
 128:	b1 09       	sbc	r27, r1
 12a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <nInkremente>
 12e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <nInkremente+0x1>
 132:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <nInkremente+0x2>
 136:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <nInkremente+0x3>
			}
		}
		sensorSchwarz = 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 140:	08 95       	ret
	}else {
		if(sensorSchwarz == 1) {
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	51 f5       	brne	.+84     	; 0x19e <runInkrementSensorCheck+0xc4>
			// Flanke erkannt
			if(PORTD & (1 << PORTD7)) {
 14a:	5f 9b       	sbis	0x0b, 7	; 11
 14c:	13 c0       	rjmp	.+38     	; 0x174 <runInkrementSensorCheck+0x9a>
				// Bei Vorwärtsfahrt hochzählen
				nInkremente++;
 14e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <nInkremente>
 152:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <nInkremente+0x1>
 156:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <nInkremente+0x2>
 15a:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <nInkremente+0x3>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	a1 1d       	adc	r26, r1
 162:	b1 1d       	adc	r27, r1
 164:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <nInkremente>
 168:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <nInkremente+0x1>
 16c:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <nInkremente+0x2>
 170:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <nInkremente+0x3>
			}
			if(PORTB & (1 << PORTB0)) {
 174:	28 9b       	sbis	0x05, 0	; 5
 176:	13 c0       	rjmp	.+38     	; 0x19e <runInkrementSensorCheck+0xc4>
				// Bei Rückwärtsfahrt runterzählen
				nInkremente--;												// ++?
 178:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <nInkremente>
 17c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <nInkremente+0x1>
 180:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <nInkremente+0x2>
 184:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <nInkremente+0x3>
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	a1 09       	sbc	r26, r1
 18c:	b1 09       	sbc	r27, r1
 18e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <nInkremente>
 192:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <nInkremente+0x1>
 196:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <nInkremente+0x2>
 19a:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <nInkremente+0x3>
			}
		}
		sensorSchwarz = 0;
 19e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1a2:	08 95       	ret

000001a4 <main>:
}


int main() {

	configureIO();
 1a4:	0e 94 48 00 	call	0x90	; 0x90 <configureIO>
	configureTimer();
 1a8:	0e 94 51 00 	call	0xa2	; 0xa2 <configureTimer>
	
	// Setze die Intterupt Register Bits
	sei();		
 1ac:	78 94       	sei
				// Anhalten
				PORTD &= ~(1 << PORTD7);
				PORTB &= ~(1 << PORTB0);

				// Status auf 1 wechseln
				status = 1;
 1ae:	11 e0       	ldi	r17, 0x01	; 1

			// Vorwärtsdrehen
			PORTD |= (1 << PORTD7);
			
			// Status auf 2 setzen
			status = 2;			
 1b0:	d2 e0       	ldi	r29, 0x02	; 2
			int mittelposition = 39;

			if(nInkremente >= mittelposition) {
				// Förderband anhalten
				PORTD &= ~(1 << PORTD7);
				status = 3;
 1b2:	03 e0       	ldi	r16, 0x03	; 3
			// 5 Sekunden warten
			_delay_ms(5000);
			// Vorwärtsdrehen
			PORTD |= (1 << PORTD7);

			status = 4;
 1b4:	68 94       	set
 1b6:	ff 24       	eor	r15, r15
 1b8:	f2 f8       	bld	r15, 2
			}
			PORTD &= ~(1 << PORTD7);
			// 2 Sekunden warten
			_delay_ms(2000);

			status = 5;
 1ba:	c5 e0       	ldi	r28, 0x05	; 5
	// Setze die Intterupt Register Bits
	sei();		

	while(1) {
		// Prüfen, ob Positionssensor inkrementiert wird
		runInkrementSensorCheck();
 1bc:	0e 94 6d 00 	call	0xda	; 0xda <runInkrementSensorCheck>

		// Prüfen, ob der Endlagensensor am Bandanfang aktiv ist
		if(status == 0) {
 1c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
 1c4:	81 11       	cpse	r24, r1
 1c6:	15 c0       	rjmp	.+42     	; 0x1f2 <main+0x4e>
			// Werkstück am Bandanfang eingelegt
			if( (PIND & (1 << PIND2)) ) {
 1c8:	4a 9b       	sbis	0x09, 2	; 9
 1ca:	13 c0       	rjmp	.+38     	; 0x1f2 <main+0x4e>
				// Fahre 2 Sekunden vorwärts
				PORTD |= (1 << PORTD7);
 1cc:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	83 ed       	ldi	r24, 0xD3	; 211
 1d2:	90 e3       	ldi	r25, 0x30	; 48
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x30>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x3a>
 1de:	00 00       	nop
				_delay_ms(1000);											// 500
				PORTD &= ~(1 << PORTD7);
 1e0:	5f 98       	cbi	0x0b, 7	; 11

				// Fahre Rückwärts bis zum Sensor
				PORTD &= ~(1 << PORTD7);
 1e2:	5f 98       	cbi	0x0b, 7	; 11
				PORTB |= (1 << PORTB0);
 1e4:	28 9a       	sbi	0x05, 0	; 5

				while( !(PIND & (1 << PIND2)) ) {
 1e6:	4a 9b       	sbis	0x09, 2	; 9
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <main+0x42>
					// Warten bis PIND2 auf HIGH geht
				}

				// Anhalten
				PORTD &= ~(1 << PORTD7);
 1ea:	5f 98       	cbi	0x0b, 7	; 11
				PORTB &= ~(1 << PORTB0);
 1ec:	28 98       	cbi	0x05, 0	; 5

				// Status auf 1 wechseln
				status = 1;
 1ee:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <status>
			}		
		}
		if(status == 1) {
 1f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	59 f4       	brne	.+22     	; 0x210 <main+0x6c>
			// Inkremente Counter auf 0 setzen
			nInkremente = 0;
 1fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <nInkremente>
 1fe:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <nInkremente+0x1>
 202:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <nInkremente+0x2>
 206:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <nInkremente+0x3>

			// Vorwärtsdrehen
			PORTD |= (1 << PORTD7);
 20a:	5f 9a       	sbi	0x0b, 7	; 11
			
			// Status auf 2 setzen
			status = 2;			
 20c:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <status>
		}
		if(status == 2) {
 210:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	79 f4       	brne	.+30     	; 0x236 <main+0x92>
			
			int mittelposition = 39;

			if(nInkremente >= mittelposition) {
 218:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <nInkremente>
 21c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <nInkremente+0x1>
 220:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <nInkremente+0x2>
 224:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <nInkremente+0x3>
 228:	87 97       	sbiw	r24, 0x27	; 39
 22a:	a1 05       	cpc	r26, r1
 22c:	b1 05       	cpc	r27, r1
 22e:	18 f0       	brcs	.+6      	; 0x236 <main+0x92>
				// Förderband anhalten
				PORTD &= ~(1 << PORTD7);
 230:	5f 98       	cbi	0x0b, 7	; 11
				status = 3;
 232:	00 93 01 01 	sts	0x0101, r16	; 0x800101 <status>
			}
		}
		if(status == 3) {
 236:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	61 f4       	brne	.+24     	; 0x256 <main+0xb2>
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	83 e2       	ldi	r24, 0x23	; 35
 242:	94 ef       	ldi	r25, 0xF4	; 244
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0xa0>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0xaa>
 24e:	00 00       	nop
			// 5 Sekunden warten
			_delay_ms(5000);
			// Vorwärtsdrehen
			PORTD |= (1 << PORTD7);
 250:	5f 9a       	sbi	0x0b, 7	; 11

			status = 4;
 252:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <status>
		}
		if(status == 4) {
 256:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	71 f4       	brne	.+28     	; 0x27a <main+0xd6>
			while(!(PIND & (1 << 3))) {
 25e:	4b 9b       	sbis	0x09, 3	; 9
 260:	fe cf       	rjmp	.-4      	; 0x25e <main+0xba>
				// Warten bis Bandende erreicht ist
			}
			PORTD &= ~(1 << PORTD7);
 262:	5f 98       	cbi	0x0b, 7	; 11
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	87 ea       	ldi	r24, 0xA7	; 167
 268:	91 e6       	ldi	r25, 0x61	; 97
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0xc6>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0xd0>
 274:	00 00       	nop
			// 2 Sekunden warten
			_delay_ms(2000);

			status = 5;
 276:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <status>
		}
		if(status == 5) {
 27a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
 27e:	85 30       	cpi	r24, 0x05	; 5
 280:	09 f0       	breq	.+2      	; 0x284 <main+0xe0>
 282:	9c cf       	rjmp	.-200    	; 0x1bc <main+0x18>
			// Fahre Rückwärts bis zum Sensor
			PORTD &= ~(1 << PORTD7);
 284:	5f 98       	cbi	0x0b, 7	; 11
			PORTB |= (1 << PORTB0);
 286:	28 9a       	sbi	0x05, 0	; 5

			while( !(PIND & (1 << PIND2)) ) {
 288:	4a 9b       	sbis	0x09, 2	; 9
 28a:	fe cf       	rjmp	.-4      	; 0x288 <main+0xe4>
				// Warten bis PIND2 auf HIGH geht
			}

			// Anhalten
			PORTD &= ~(1 << PORTD7);
 28c:	5f 98       	cbi	0x0b, 7	; 11
			PORTB &= ~(1 << PORTB0);
 28e:	28 98       	cbi	0x05, 0	; 5
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	87 ea       	ldi	r24, 0xA7	; 167
 294:	91 e6       	ldi	r25, 0x61	; 97
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0xf2>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0xfc>
 2a0:	00 00       	nop

			// 2 Sekunden warten
			_delay_ms(2000);

			status = 0;
 2a2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <status>
 2a6:	8a cf       	rjmp	.-236    	; 0x1bc <main+0x18>

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
